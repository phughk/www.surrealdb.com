<Layout::Blocks cols-1 as |block|>

	<block>
		<h4 row middle>
			Get realtime updates in your application with SurrealDB Live Queries
		</h4>
		<p><code>v1.0.0-beta.10</code> introduces Live Queries. This powerful technology allows you to write applications where you can serve realtime updates to your frontend.</p>
	</block>
	<block>
		<codes vertical>
			<Code @name="docs-releases-1-0-0-beta-10-live-queries.surql" text="SurrealQL">
				// You can initiate the live query in your application
				LET $lq = LIVE SELECT * FROM person WHERE age > 18;
				// And you can dispose the live query once it is no longer needed
				KILL $lq;
			</Code>
			<Code @name="docs-releases-1-0-0-beta-10-live-queries.js" text="JavaScript">
				// SurrealDB SDKs allow you to easily initiate live queries, and to process the received messages.
				const lq = await db.live('person', function({ action, result }) {
					if (action == "CREATE") {
						renderPersonInFrontend(result);
					}
				});

				// Once you no longer need the live feed of updates, you can dispose the live query
				await db.kill(lq);
			</Code>
		</codes>
	</block>

	<block>
		<h4 row middle>
			Efficiently index and search your data with SurrealDB Full Text Search
		</h4>
		<p>With Full Text Search, you can efficiently store and index data, and search through it.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-full-text-search.surql">
			// We can define an analyzer on our database,
			// Then, define an index to dictate which content we want to index (yep, that easy)
			DEFINE ANALYZER simple TOKENIZERS blank,class FILTERS snowball(english);
			DEFINE INDEX content ON article FIELDS content SEARCH ANALYZER simple BM25 HIGHLIGHTS;

			// We can then create some content
			CREATE article SET content = "Join us at SurrealDB World, as we unveil our version 1.0.0 to the world!";
			CREATE article SET content = "We will absolutely be at Surreal World!";

			// And lastly, select some data from the article table.
			// We use the special "@num@" operator, where we define a reference.
			// We can then reference back in the search::* functions.
			SELECT
				*,
				search::score(1) AS score,
				search::offsets(1) AS offsets,
				search::highlight('<b>', '</b>', 1) AS highlighted
			FROM article WHERE
				content @1@ 'world'
			ORDER BY score DESC;
		</Code>
	</block>

	<block>
		<h4 row middle>
			Allow or deny capabilities when starting your SurrealDB instance
		</h4>
		<p>
			All capabilities are disabled by default. This means that by default, you are not able to use any methods, embedded scripting functions, make outbound network calls, or access the database anonymously.
			Down below follows a set of examples to showcase how one can configure capabilities.
		</p>
		<p>Capabilities are further documented in the <Link @link="https://docs.surrealdb.com/docs/security/capabilities">Capabilities</Link> documentation.</p>
	</block>
	<block>
			<Code @name="docs-releases-1-0-0-beta-10-capabilities.shell">
				# Allow all capabilities
				user@localhost % surreal start --allow-all

				# Allow all functions, except for custom functions
				user@localhost % surreal start --allow-funcs --deny-funcs fn

				# Allow all capabilities, but deny guest/anonymous access to the database
				user@localhost % surreal start --allow-all --deny-guests
			</Code>
	</block>

	<block>
		<h4 row middle>
			Revamped root users
		</h4>

		<p>It is now possible to define multiple root users in SurrealDB. This change did require some changes in the way that you start your database however.</p>
		<p>With this change, you will now only initially have to provide the <code>--user</code> and <code>--pass</code> flags to create the initial root user, but once the first root user exists, they will no longer by utilized.</p>
		<p>
			For more information, check out the <Link @link="https://docs.surrealdb.com/docs/security/authentication">Authentication guide</Link>, and the <Link @link="https://docs.surrealdb.com/docs/cli/start"><code>surreal start</code></Link> and <Link @link="https://docs.surrealdb.com/docs/surrealql/statements/define/user"><code>DEFINE USER</code></Link> documentation.
		</p>
	</block>
	<block>
		<codes vertical>
			<Code @name="docs_installation_upgrading_beta9-to-beta10_revamped-root-users.shell" text="Command line">
				# When you initially start the database, you can create the first root user.
				user@localhost % surreal start --auth --user root --pass root file:database.db

				# In the future, you don't need to specify the --user and --pass flags anymore
				user@localhost % surreal start --auth file:database.db
			</Code>
			<Code @name="docs_installation_upgrading_beta9-to-beta10_more-root-users.surql" text="SurrealQL">
				// Afterwards, you are able to create multiple root users.
				DEFINE USER tobie ON ROOT PASSWORD "SecurePassword!" ROLES OWNER;
				DEFINE USER jaime ON ROOT PASSWORD "SecurePassword!" ROLES EDITOR;
				DEFINE USER john  ON ROOT PASSWORD "SecurePassword!" ROLES VIEWER;
			</Code>
		</codes>
	</block>

	<block>
		<h4 row middle>
			Strict typing in SurrealQL
		</h4>
		<p>
			<code>v1.0.0-beta.10</code> introduces a more strict and powerful typing system.
			It makes things more simple to understand, and it goes a long way in preventing all kinds of weird bugs in your schemas!
		</p>
	</block>
	<block>
		<Code @name="releases/v1.0.0-beta.10/strict-types.surql" />
	</block>

	<block>
		<h4 row middle>
			Set a <code>DEFAULT</code> value on field definitions
		</h4>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-default.surql">
			// You previously needed to involve logic with the "VALUE" clause to set a default value.
			DEFINE FIELD enabled ON user TYPE bool VALUE $value OR $before OR true;
			// You can now simply use the DEFAULT clause for this.
			DEFINE FIELD enabled ON user TYPE bool DEFAULT true;

			// As an added bonus, when you only define a VALUE clause with a simple value,
			// then that will also act as the default value.
			DEFINE FIELD constant ON demo VALUE 123;
			// This will act the same as the following
			DEFINE FIELD constant ON demo VALUE 123 DEFAULT 123;
		</Code>
	</block>

	<block>
		<h4 row middle>
			<code>PERMISSIONS</code> on global parameters and custom functions
		</h4>
		<p>
			Scope and anonymous users previously had access to every defined global parameter and function. You can now define these resources with a <code>PERMISSIONS</code> clause to protect them.
		</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-param-function-permissions.surql">
			DEFINE PARAM $perms_none VALUE 'Nobody can see me' PERMISSIONS NONE;
			DEFINE PARAM $perms_full VALUE 'Everybody can see me' PERMISSIONS FULL;
			DEFINE PARAM $perms_scope VALUE 'Only admins can see me' PERMISSIONS WHERE $scope = 'admin';

			DEFINE FUNCTION fn::perms::none() {
				RETURN 'Nobody can invoke me';
			} PERMISSIONS NONE;

			DEFINE FUNCTION fn::perms::full() {
				RETURN 'Everybody can invoke me';
			} PERMISSIONS FULL;

			DEFINE FUNCTION fn::perms::scope() {
				RETURN 'Only admins can invoke me';
			} PERMISSIONS WHERE $scope = 'admin';
		</Code>
	</block>

	<block>
		<h4 row middle>
			<code>FOR</code>, <code>BREAK</code> and <code>CONTINUE</code> statements
		</h4>
	</block>
	<block>
		<Code @name="releases/v1.0.0-beta.10/for-break-continue.surql" />
	</block>

	<block>
		<h4 row middle>
			<code>THROW</code> statement
		</h4>
		<p>
			Did something unexpected happen, and do you want to throw an error to the client? Now you can!
		</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-throw.surql">
			IF !is::string($variable) {
				THROW "Expected a string, but got something else."
			}
		</Code>
	</block>

	<block>
		<h4 row middle>
			<code>COMMENT</code> away on resource definitions!
		</h4>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-comment.surql">
			// Give extra context about a certain resource
			DEFINE TABLE user COMMENT "This table will store users!";
		</Code>
	</block>

	<block>
		<h4 row middle>
			Less bulky <code>IF-ELSE</code> statements
		</h4>
		<p>
			We found the <code>IF-ELSE</code> statement to be a bit bulky at times.
			Now, when you use a block (<code>{}</code>) as the body of the statement, you can skip out on the <code>THEN</code> and <code>END</code> keywords!
		</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-if-else.surql">
			// Previously
			IF something = true THEN {
				RETURN 123;
			} END;

			// Now
			IF something = true {
				RETURN 123;
			};
		</Code>
	</block>

	<block>
		<h4 row middle>
			More features for our embedded scripting functions
		</h4>
		<p>
			With <code>fetch()</code>, <code>query()</code>, <code>value()</code> and basically every SurrealQL function now being available within the embedded scripting functions, they are a very powerful extension to SurrealQL, and can be used to solve complex problems otherwise impossible!
		</p>
		<p>Read more about them in the <Link @link="https://docs.surrealdb.com/docs/surrealql/functions/script/overview">Embedded scripting functions</Link> documentation.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-10-capabilities.js">
			function() {
				const page = await fetch('https://google.com');
				const people = await surrealdb.query('SELECT * FROM person');
				const auth = await surrealdb.value('auth');
				const uuid = surrealdb.functions.rand.uuid.v4();
			}
		</Code>
	</block>

</Layout::Blocks>