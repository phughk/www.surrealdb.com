<Layout::Blocks cols-1 as |block|>

	<block>
		<h4 row middle>
			Enable returning a single field from <code>SELECT</code> statements
		</h4>
		<p>SurrealDB now allows you to fetch a single field from a <code>SELECT</code> statement or from a subquery, returning an array of values, rather than an array of objects.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-select-value.surql">
			// We can now select an array of just a single field
			SELECT VALUE name FROM person;
		</Code>
	</block>

	<block>
		<h4 row middle>
			Add support for <code>FETCH</code> clauses at the end of <code>RETURN</code> statements
		</h4>
		<p>SurrealDB now allows fetching remote fields in <code>RETURN</code> statements, in addition to <code>SELECT</code> statements.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-return-fetch.surql">
			// We can now fetch fields from RETURN statements
			RETURN person:tobie FETCH account, connections;
		</Code>
	</block>

	<block>
		<h4 row middle>
			Add Null Coalescing operator and Ternary Conditional operator
		</h4>
		<p>SurrealDB now supports the Null Coalescing operator (<code>??</code>), and the Ternary Conditional operator (<code>?:</code>) for simpler logic calculations.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-operators.surql">
			// Check whether either of two values are truthy
			SELECT * FROM NULL ?: 0 ?: false ?: 10; -- Will return 10
			// Check whether either of two values are truthy and not NULL.
			SELECT * FROM NULL ?? 0 ?? false ?? 10; -- Will return 0
		</Code>
	</block>

	<block>
		<h4 row middle>
			Allow fetching fields from within complex Record IDs
		</h4>
		<p>Fields within complex Record IDs can now be retrieved and used within <code>SELECT</code> queries.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-embedded-id.surql">
			// Create a record with a complex Record ID
			CREATE recording:{ location: 'London', date: time::now() } SET temperature = 23.7;
			// Select a field from within the Record ID
			SELECT id.location, temperature FROM recording;
		</Code>
	</block>

	<block>
		<h4 row middle>
			Support for <code>FLEXIBLE</code> fields on <code>SCHEMAFULL</code> tables
		</h4>
		<p><code>SCHEMAFULL</code> and <code>SCHEMALESS</code> functionality can now be used together, suitable for capturing schema-free log data.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-flexible.surql">
			// We want to define a SCHEMAFULL table
			DEFINE TABLE person SCHEMAFULL;
			// But we want one field to allow any content
			DEFINE FIELD settings on person FLEXIBLE TYPE object;
			// We can then set the field value without a schema
			CREATE person:test CONTENT {
				settings: {
					nested: {
						object: {
							thing: 'test'
						}
					}
				}
			};
		</Code>
	</block>

	<block>
		<h4 row middle>
			Support code blocks and advanced expressions
		</h4>
		<p>It is now possible to run blocks of code, with support for an arbitrary number of statements, including <code>LET</code> and <code>RETURN</code> statements. This allows for writing advanced custom logic, and allowing for more complicated handling of data operations.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-blocks.surql">
			DEFINE FIELD average_sales ON metrics VALUE {
				LET $sales = (SELECT VALUE quantity FROM sales);
				LET $total = math::sum($sales);
				LET $count = count($sales);
				RETURN ($total / $count);
			};
		</Code>
	</block>

	<block>
		<h4 row middle>
			Enable access to the user input in <code>DEFINE FIELD</code> statements
		</h4>
		<p><code>DEFINE FIELD</code> statements now have access to an <code>$input</code> variable in the <code>VALUE</code> and <code>ASSERT</code> clauses.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-input.surql">
			DEFINE FIELD name ON TABLE person
				-- Prevent any changes, if the input value is not title-case
				ASSERT IF $input THEN $input = /^[A-Z]{1}[a-z]+$/ ELSE true END
				-- If the input value is title-case, then add a prefix to the field
				VALUE IF $input THEN 'Name: ' + $input ELSE $value END
			;
			-- This record update will fail
			UPDATE person:test CONTENT { name: 'jaime' };
			-- This record update will succeed
			UPDATE person:test REPLACE { name: 'Tobie' };
		</Code>
	</block>

	<block>
		<h4 row middle>
			Define global parameters with <code>DEFINE PARAM</code> statements
		</h4>
		<p>SurrealDB now supports the ability to define global database-wide parameters, which can be useful to store certain commonly-used variables.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-params.surql">
			-- Define a global parameter which will be accessible to all queries.
			DEFINE PARAM $STRIPE VALUE "https://api.stripe.com/payments/new";
			-- Use the defined global parameter in all queries on the database.
			DEFINE EVENT payment ON TABLE order WHEN $event = 'CREATE' THEN http::post($STRIPE, $value);
			// We can also override the parameter for certain queries if we want
			LET $STRIPE = "https://api-dev.stripe.com/payments/new";
			// And fetching this parameter will fetch the locally defined parameter
			RETURN http::post($STRIPE, $value);
		</Code>
	</block>

	<block>
		<h4 row middle>
			Define custom functions with <code>DEFINE FUNCTION</code> statements
		</h4>
		<p>SurrealDB now supports the ability to define global database-wide custom functions, which allow for complicated or repeated user-defined code, to be run seamlessly within any query across the database. Custom functions support typed arguments, and multiple nested queries with custom logic.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-functions.surql">
			-- Define a global function which can be used in any query
			DEFINE FUNCTION fn::get_person($first: string, $last: string, $birthday: string) {

				LET $person = SELECT * FROM person WHERE [first, last, birthday] = [$first, $last, $birthday];

				RETURN IF $person[0].id THEN
					$person[0]
				ELSE
					CREATE person SET first = $first, last = $last, birthday = $birthday
				END;

			};

			-- Call the global custom function, receiving the returned result
			LET $person = fn::get_person('Tobie', 'Morgan Hitchcock', '2022-09-21');
		</Code>
	</block>

	<block>
		<h4 row middle>
			Add support for selecting ranges of records
		</h4>
		<p>SurrealDB supports the ability to query a range of records, using the record ID. The record ID ranges, retrieve records using the natural sorting order of the record IDs. These range queries can be used to query a range of records in a timeseries context.</p>
	</block>
	<block>
		<Code @name="docs-releases-1-0-0-beta-9-record-ranges.surql">
			-- Select all person records with IDs between the given range
			SELECT * FROM person:1..1000;
			-- Select all records for a particular location, inclusive
			SELECT * FROM temperature:['London', NONE]..=['London', time::now()];
			-- Select all temperature records with IDs less than a maximum value
			SELECT * FROM temperature:..['London', '2022-08-29T08:09:31'];
			-- Select all temperature records with IDs greater than a minimum value
			SELECT * FROM temperature:['London', '2022-08-29T08:03:39']..;
			-- Select all temperature records with IDs between the specified range
			SELECT * FROM temperature:['London', '2022-08-29T08:03:39']..['London', '2022-08-29T08:09:31'];
		</Code>
	</block>

	<block>
		<h4 row middle>
			Rust API with embedded and remote connections over HTTP and WebSockets
		</h4>
		<p>SurrealDB now has a native Rust API for connecting to local database instances, and remote database servers over both HTTP and WebSockets with a binary protocol and a custom serialization format.</p>
	</block>
	<block>
		<Code @name="releases/v1.0.0-beta.9/rust-api.rust" />
	</block>


</Layout::Blocks>