<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.integration">Integrations</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks">SDKs</Crumb::Item>
	<Crumb::Item @link="docs.integration.sdks.dotnet">.NET</Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><Devicon @size="50" @type="dotnet" /> .NET SDK for SurrealDB</h2>
	<p>
		The SurrealDB SDK for .NET enables simple and advanced querying of a remote database from client or
		server-side code.
		Remote connections automatically reconnect when the connection is terminated.
	</p>
	<p>To contribute to this documentation, <Link @link={{github}}>edit this file on GitHub</Link>.</p>
	<p>To contribute to the SDK code, <Link @link="https://github.com/surrealdb/surrealdb.net">submit an Issue or Pull Request here</Link>.</p>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Install the SDK</h3>
	<p>
		<ul>
			<li>Create a new project using your favorite IDE (Visual Studio, JetBrains Rider, etc...)</li>
			<li>or use the <code>dotnet new</code> command.</li>
		</ul>
		Once ready, add the <Link @link="https://www.nuget.org/packages/SurrealDb.Net">SurrealDB SDK</Link> to your dependencies:
	</p>
	<Code @name="docs-integration-libraries-dotnet-nuget.bash">
		dotnet add package SurrealDb.Net
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>Connect to SurrealDB</h3>

	<p>Let's start by creating a new console app.</p>
	<Code @name="docs-integration-libraries-dotnet-new-console.bash">
		dotnet new console -o SurrealDbExample
		cd SurrealDbExample
		dotnet add package SurrealDb.Net
	</Code>

	<p>Open <code>Program.cs</code> and replace everything in there with the following code to try out some basic operations using the SurrealDB SDK.</p>
	<Code @name="docs/integration/libraries/dotnet/basic.cs" />

	<p>Then make sure your SurrealDB server is running on <code>127.0.0.1:8000</code> and run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-dotnet-basic-run.bash">
		dotnet run
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3>SDK methods</h3>
	<p>The .NET SDK comes with a number of built-in functions.</p>
</Layout::Text>

<Layout::Gap tiny />

<Layout::Table filled>
	<table>
		<thead>
			<tr>
				<th w-40>Function</th>
				<th w-60>Description</th>
			</tr>
		</thead>
		<tbody>
			<tr>
				<td>
					<a href="#ctor">
						<Ascua::Prism::Inline @language="csharp" @code="new SurrealDbClient(endpoint)" />
					</a>
				</td>
				<td>Creates a new client, detecting the right protocol from the endpoint</td>
			</tr>
			<tr>
				<td>
					<a href="#new-http">
						<Ascua::Prism::Inline @language="csharp" @code="SurrealDbHttpClient.New(host)" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Initialises a client using HTTP protocol</td>
			</tr>
			<tr>
				<td>
					<a href="#new-https">
						<Ascua::Prism::Inline @language="csharp" @code="SurrealDbHttpsClient.New(host)" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Initialises a client using HTTPS protocol</td>
			</tr>
			<tr>
				<td>
					<a href="#new-ws">
						<Ascua::Prism::Inline @language="csharp" @code="SurrealDbWsClient.New(host)" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Initialises a client using WS protocol</td>
			</tr>
			<tr>
				<td>
					<a href="#new-wss">
						<Ascua::Prism::Inline @language="csharp" @code="SurrealDbWssClient.New(host)" />
					</a>
					<l faint r>static</l>
				</td>
				<td>Initialises a client using WSS protocol</td>
			</tr>
			<tr>
				<td>
					<a href="#configure">
						<Ascua::Prism::Inline @language="csharp" @code="db.Configure(ns, db, credentials)" />
					</a>
				</td>
				<td>Configures the client to use a specific namespace and database, with credentials</td>
			</tr>
			<tr>
				<td>
					<a href="#connect">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Connect()" />
					</a>
				</td>
				<td>Connects the client to the underlying endpoint, also improving performance to avoid cold starts</td>
			</tr>
			<tr>
				<td>
					<a href="#use">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Use(ns, db)" />
					</a>
				</td>
				<td>Switch to a specific namespace and database</td>
			</tr>
			<tr>
				<td>
					<a href="#signup">
						<Ascua::Prism::Inline @language="csharp" @code="await db.SignUp(credentials)" />
					</a>
				</td>
				<td>Signs up a user to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#signin">
						<Ascua::Prism::Inline @language="csharp" @code="await db.SignIn(credentials)" />
					</a>
				</td>
				<td>Signs this connection in to a specific authentication scope</td>
			</tr>
			<tr>
				<td>
					<a href="#authenticate">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Authenticate(jwt)" />
					</a>
				</td>
				<td>Authenticates the current connection with a JWT token</td>
			</tr>
			<tr>
				<td>
					<a href="#invalidate">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Invalidate()" />
					</a>
				</td>
				<td>Invalidates the authentication for the current connection</td>
			</tr>
			<tr>
				<td>
					<a href="#info">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Info<T>()" />
					</a>
				</td>
				<td>Returns the record of an authenticated scope user</td>
			</tr>
			<tr>
				<td>
					<a href="#set">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Set(key, value)" />
					</a>
				</td>
				<td>Assigns a value as a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#unset">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Unset(key)" />
					</a>
				</td>
				<td>Removes a parameter for this connection</td>
			</tr>
			<tr>
				<td>
					<a href="#query">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Query(sql, params)" />
					</a>
				</td>
				<td>Runs a set of SurrealQL statements against the database</td>
			</tr>
			<tr>
				<td>
					<a href="#select">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Select<T>(resource)" />
					</a>
				</td>
				<td>Selects all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#create">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Create<T>(resource, data)" />
					</a>
				</td>
				<td>Creates a record in the database</td>
			</tr>
			<tr>
				<td>
					<a href="#upsert">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Upsert<T>(data)" />
					</a>
				</td>
				<td>Creates or updates a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#merge">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Merge<T>(resource, data)" />
					</a>
				</td>
				<td>Modifies all records in a table, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#delete">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Delete(resource)" />
					</a>
				</td>
				<td>Deletes all records, or a specific record</td>
			</tr>
			<tr>
				<td>
					<a href="#listen-live">
						<Ascua::Prism::Inline @language="csharp" @code="db.ListenLive<T>(queryUuid)" />
					</a>
				</td>
				<td>Listen for live query responses</td>
			</tr>
			<tr>
				<td>
					<a href="#live-query">
						<Ascua::Prism::Inline @language="csharp" @code="await db.LiveQuery<T>(sql, params)" />
					</a>
				</td>
				<td>Initiate a live query from a SurrealQL statement</td>
			</tr>
			<tr>
				<td>
					<a href="#live-table">
						<Ascua::Prism::Inline @language="csharp" @code="await db.LiveTable<T>(table, diff)" />
					</a>
				</td>
				<td>Initiate a live query from a table</td>
			</tr>
			<tr>
				<td>
					<a href="#kill">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Kill(queryUuid)" />
					</a>
				</td>
				<td>Kill a running live query</td>
			</tr>
			<tr>
				<td>
					<a href="#version">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Version()" />
					</a>
				</td>
				<td>Retrieves the version of the SurrealDB instance</td>
			</tr>
			<tr>
				<td>
					<a href="#health">
						<Ascua::Prism::Inline @language="csharp" @code="await db.Health()" />
					</a>
				</td>
				<td>Checks the status of the database server and storage engine</td>
			</tr>
		</tbody>
	</table>
</Layout::Table>

<Layout::Gap small />

<Layout::Group {{waypoint "ctor"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="new SurrealDbClient(endpoint)" /></h3>
		<p>Creates a new client, detecting the right protocol from the endpoint.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>endpoint</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database endpoint to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>httpClientFactory</code>
							<l faint r>Optional</l>
						</td>
						<td>
							An IHttpClientFactory instance.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/ctor.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "new-http"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="SurrealDbHttpClient.New(host)" /></h3>
		<p>Initialises a client using HTTP protocol.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>host</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database host to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>httpClientFactory</code>
							<l faint r>Optional</l>
						</td>
						<td>
							An IHttpClientFactory instance.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/new-http.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "new-https"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="SurrealDbHttpsClient.New(host)" /></h3>
		<p>Initialises a client using HTTPS protocol.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>host</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database host to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>httpClientFactory</code>
							<l faint r>Optional</l>
						</td>
						<td>
							An IHttpClientFactory instance.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/new-https.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "new-ws"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="SurrealDbWsClient.New(host)" /></h3>
		<p>Initialises a client using WS protocol.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>host</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database host to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>ns</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table namespace to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table database to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>username</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The username to connect to (with root access).
						</td>
					</tr>
					<tr>
						<td>
							<code>password</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The password to connect to (with root access).
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/new-ws.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "new-wss"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="SurrealDbWssClient.New(host)" /></h3>
		<p>Initialises a client using WSS protocol.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>host</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The database host to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>ns</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table namespace to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table database to connect to.
						</td>
					</tr>
					<tr>
						<td>
							<code>username</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The username to connect to (with root access).
						</td>
					</tr>
					<tr>
						<td>
							<code>password</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The password to connect to (with root access).
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/new-wss.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "configure"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="db.Configure(ns, db, credentials)" /></h3>
		<p>Configures the client to use a specific namespace and database, with credentials.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>ns</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table namespace to use.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The table database to use.
						</td>
					</tr>
					<tr>
						<td>
							<code>username</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The username with root access.
						</td>
					</tr>
					<tr>
						<td>
							<code>password</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The password with root access.
						</td>
					</tr>
					<tr>
						<td>
							<code>token</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The value of the JWT token.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/configure.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "connect"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Connect()" /></h3>
		<p>Connects the client to the underlying endpoint, also improving performance to avoid cold starts.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/connect.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "use"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Use(ns, db)" /></h3>
		<p>Switch to a specific namespace and database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>ns</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific namespace.
						</td>
					</tr>
					<tr>
						<td>
							<code>db</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Switches to a specific database.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs-integration-libraries-dotnet-use.cs">
			await db.Use("test", "test");
		</Code>
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signup"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.SignUp(credentials)" /></h3>
		<p>Signs up to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>credentials</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Credentials to sign up as a scoped user.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/signup.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "signin"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.SignIn(credentials)" /></h3>
		<p>Signs in to a specific authentication scope.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>credentials</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Variables used in a signin query.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/signin.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "authenticate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Authenticate(jwt)" /></h3>
		<p>Authenticates the current connection with a JWT token.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>jwt</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The JWT object holder of the authentication token.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/authenticate.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "invalidate"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Invalidate()" /></h3>
		<p>Invalidates the authentication for the current connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/invalidate.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "info"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Info<T>()" /></h3>
		<p>This method returns the record of an authenticated scope user.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/info.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "set"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Set(key, value)" /></h3>
		<p>Assigns a value as a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>value</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Assigns the value to the variable name.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/set.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "unset"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Unset(key)" /></h3>
		<p>Removes a parameter for this connection.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>key</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the name of the variable.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/unset.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Query(sql, params)" /></h3>
		<p>Runs a set of SurrealQL statements against the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>sql</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>params</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/query.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "select"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Select<T>(resource)" /></h3>
		<p>Selects all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>resource</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/select.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "create"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Create<T>(resource, data)" /></h3>
		<p>Creates a record in the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>resource</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to create.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/create.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "upsert"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Upsert<T>(data)" /></h3>
		<p>Creates or updates a specific record.</p>
		<blockquote yellow text="Note">This function creates a new document / record or replaces the current one with the specified data.</blockquote>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>data</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The document / record data to insert.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/upsert.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "patch"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Merge<T>(resource, data)" /></h3>
		<p>Modifies all records in a table, or a specific record.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>resource</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or the specific record ID to modify.
						</td>
					</tr>
					<tr>
						<td>
							<code>data</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The data with which to modify the records.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/merge.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "delete"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Delete(resource)" /></h3>
		<p>Deletes all records in a table, or a specific record, from the database.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>resource</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name or a record ID to select.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/delete.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "listen-live"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="db.ListenLive<T>(queryUuid)" /></h3>
		<p>Listen responses from an existing live query.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>queryUuid</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The UUID of the live query to consume.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/listen-live.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "live-query"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.LiveQuery<T>(sql, params)" /></h3>
		<p>Initiate a live query from a SurrealQL statement.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>sql</code>
							<l yellow r>Required</l>
						</td>
						<td>
							Specifies the SurrealQL statements.
						</td>
					</tr>
					<tr>
						<td>
							<code>params</code>
							<l faint r>Optional</l>
						</td>
						<td>
							Assigns variables which can be used in the query.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/live-query.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "live-table"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.LiveTable<T>(table, diff)" /></h3>
		<p>Initiate a live query from a table.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>table</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The table name to listen for changes for.
						</td>
					</tr>
					<tr>
						<td>
							<code>diff</code>
							<l faint r>Optional</l>
						</td>
						<td>
							If set to true, live notifications will include an array of JSON Patch objects, rather than the entire record for each notification.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/live-table.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "kill"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Kill(queryUuid)" /></h3>
		<p>Kills a running live query by it's UUID.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>queryUuid</code>
							<l yellow r>Required</l>
						</td>
						<td>
							The UUID of the live query you wish to kill.
						</td>
					</tr>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/kill.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "version"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Version()" /></h3>
		<p>Retrieves the version of the SurrealDB instance.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/version.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap small />

<Layout::Group {{waypoint "health"}}>

	<Layout::Text text-l text-f>
		<h3><Ascua::Prism::Inline @language="csharp" @code="await db.Health()" /></h3>
		<p>Checks the status of the database server and storage engine.</p>
		<Layout::Table>
			<table>
				<thead>
					<tr>
						<th w-40>Arguments</th>
						<th w-60>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>
							<code>cancellationToken</code>
							<l faint r>Optional</l>
						</td>
						<td>
							The cancellationToken enables graceful cancellation of asynchronous operations.
						</td>
					</tr>
				</tbody>
			</table>
		</Layout::Table>
		<Code @name="docs/integration/libraries/dotnet/health.cs" />
	</Layout::Text>

</Layout::Group>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3 id="dependency-injection">Dependency Injection</h3>

	<p>The .NET SDK also support Dependency Injection to ease the use of the <code>SurrealDbClient</code> in your application.</p>

	<p>Let's start by creating a new ASP.NET Core web app.</p>
	<Code @name="docs-integration-libraries-dotnet-new-webapp.bash">
		dotnet new webapp -o SurrealDbWeatherApi
		cd SurrealDbWeatherApi
		dotnet add package SurrealDb.Net
	</Code>

	<p>
		Open <code>appsettings.Development.json</code> and replace everything in there with the following code. 
		We have added a new <a href="#connection-strings">Connection String</a> called <code>SurrealDB</code> with the default configuration.
	</p>
	<Code @name="docs/integration/libraries/dotnet/dependency-injection/appsettings.json" />

	<p>
		Open <code>Program.cs</code> and replace everything in there with the following code. 
		This code is using the <code>AddSurreal()</code> extension method to inject services automatically.
		Notice that all we have to do is one line of code to configure the SurrealDB client 
		with the previously set Connection String.
	</p>
	<blockquote yellow text="Note">
		By default, this function will register both <code>ISurrealDbClient</code> and <code>SurrealDbClient</code> 
		using the <code>Singleton</code> service lifetime.
	</blockquote>
	<Code @name="docs/integration/libraries/dotnet/dependency-injection/program.cs" />

	<p>
		Open <code>WeatherForecastController.cs</code> and replace everything in there with the following code.
		Finally, we can inject the <code>ISurrealDbClient</code> inside our Controller.
	</p>
	<Code @name="docs/integration/libraries/dotnet/dependency-injection/controller.cs" />

	<p>Then make sure your SurrealDB server is running on <code>127.0.0.1:8000</code> and run your app from the command line with:</p>
	<Code @name="docs-integration-libraries-dotnet-basic-run.bash">
		dotnet run
	</Code>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>
	<h3 id="connection-strings">Connection Strings</h3>

	<p>
		Connection Strings are an easy way to configure your application to connect to a SurrealDB instance.
		They are stored in the <code>appsettings.json</code> file and can be used to configure the <code>SurrealDbClient</code>.
	</p>
	<p>
		In general, it is known as a best practice to:
		<ul>
			<li>set a development Connection String in <code>appsettings.Development.json</code>,</li>
			<li>store your production Connection String in a Secret environment variable, or even better in a Vault.</li>
		</ul>
	</p>

	<Layout::Table>
		<table>
			<thead>
				<tr>
					<th w-20>Keys</th>
					<th w-40>Description</th>
					<th w-20>Aliases</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>
						<code>Endpoint</code>
						<l yellow r>Required</l>
					</td>
					<td>
						The database endpoint to connect to.
					</td>
					<td>
						<code>Server</code>
					</td>
				</tr>
				<tr>
					<td>
						<code>Namespace</code>
						<l faint r>Optional</l>
					</td>
					<td>
						Switches to a specific namespace.
					</td>
					<td>
						<code>NS</code>
					</td>
				</tr>
				<tr>
					<td>
						<code>Database</code>
						<l faint r>Optional</l>
					</td>
					<td>
						Switches to a specific database.
					</td>
					<td>
						<code>DB</code>
					</td>
				</tr>
				<tr>
					<td>
						<code>Username</code>
						<l faint r>Optional</l>
					</td>
					<td>
						Username used to have root access.
					</td>
					<td>
						<code>User</code>
					</td>
				</tr>
				<tr>
					<td>
						<code>Password</code>
						<l faint r>Optional</l>
					</td>
					<td>
						Password used to have root access.
					</td>
					<td>
						<code>Pass</code>
					</td>
				</tr>
				<tr>
					<td>
						<code>Token</code>
						<l faint r>Optional</l>
					</td>
					<td>
						Token (JWT) used to have user access.
					</td>
					<td></td>
				</tr>
			</tbody>
		</table>
	</Layout::Table>

	<Layout::Gap tiny />

	<p>Here is a couple of examples of Connection Strings:</p>
	<Code @name="docs-integration-libraries-dotnet-connection-string.bash">
		Server=http://127.0.0.1:8000;Namespace=test;Database=test;Username=root;Password=root
	</Code>
	<Code @name="docs-integration-libraries-dotnet-connection-alt.bash">
		Endpoint=http://127.0.0.1:8000;NS=test;DB=test;User=root;Pass=root
	</Code>
</Layout::Text>

<Layout::Gap large />
